/*
 * -------------------------------------------------
 *  nf-core/bacass Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  outdir = './results'
  skip_kraken2 = false
  kraken2db = ""
  unicycler_args = ""
  prokka_args = ""
  assembler = 'unicycler' //allowed are unicycler, canu, miniasm 
  //Short, Long or Hybrid assembly?
  assembly_type = 'short' //allowed are short, long, hybrid (hybrid works only with Unicycler)
  annotation_tool = 'prokka' //Default
  canu_args = '' //Default no extra options, can be adjusted by the user
  dfast_config = "$baseDir/assets/test_config_dfast.py"
  polish_method = 'medaka'
  //Skipping parts
  skip_pycoqc = false
  skip_annotation = false
  skip_polish = false

  // Boilerplate options
  name = false
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  email = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'eu-west-1'
  igenomesIgnore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/bacass:1.1.0'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    docker.fixOwnership = true
    docker.runOptions = "-u \$(id -u):\$(id -g)"
  }
  singularity { 
    singularity.enabled = true 
    singularity.autoMounts = true
  }
  test { includeConfig 'conf/test.config' }
  test_long { includeConfig 'conf/test_long.config' }
  test_long_miniasm { includeConfig 'conf/test_long_miniasm.config' }
  test_hybrid { includeConfig 'conf/test_hybrid.config' }
}

// Load igenomes.config if required
if(!params.igenomesIgnore){
  includeConfig 'conf/igenomes.config'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/bacass'
  author = 'Andreas Wilm, Alexander Peltzer'
  homePage = 'https://github.com/nf-core/bacass'
  description = 'Simple bacterial assembly and annotation pipeline.'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.2.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
